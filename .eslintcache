[{"/home/user/andronik/cv-project/cv-project/src/index.js":"1","/home/user/andronik/cv-project/cv-project/src/reportWebVitals.js":"2","/home/user/andronik/cv-project/cv-project/src/store/configureStore.js":"3","/home/user/andronik/cv-project/cv-project/src/App.js":"4","/home/user/andronik/cv-project/cv-project/src/components/Template1.jsx":"5","/home/user/andronik/cv-project/cv-project/src/reducers/rootReducer.js":"6","/home/user/andronik/cv-project/cv-project/src/main.js":"7","/home/user/andronik/cv-project/cv-project/src/1.js":"8","/home/user/andronik/cv-project/cv-project/src/test1.js":"9","/home/user/andronik/cv-project/cv-project/src/templatePage.jsx":"10","/home/user/andronik/cv-project/cv-project/src/reducers/aboutWorkHistoryReducer.js":"11","/home/user/andronik/cv-project/cv-project/src/reducers/aboutMeReducer.js":"12","/home/user/andronik/cv-project/cv-project/src/reducers/portfolioReducer.js":"13","/home/user/andronik/cv-project/cv-project/src/reducers/templateReducer.js":"14","/home/user/andronik/cv-project/cv-project/src/reducers/aboutHardSkillsReducer.js":"15","/home/user/andronik/cv-project/cv-project/src/components/inputs/portfolio.js":"16","/home/user/andronik/cv-project/cv-project/src/components/inputs/aboutMe.js":"17","/home/user/andronik/cv-project/cv-project/src/components/inputs/aboutWorkHistory.js":"18","/home/user/andronik/cv-project/cv-project/src/components/inputs/aboutHardSkills.js":"19","/home/user/andronik/cv-project/cv-project/src/actions/templateActions.js":"20","/home/user/andronik/cv-project/cv-project/src/actions/aboutMeActions.js":"21","/home/user/andronik/cv-project/cv-project/src/actions/aboutWorkActions.js":"22","/home/user/andronik/cv-project/cv-project/src/actions/aboutHardSkillsActions.js":"23","/home/user/andronik/cv-project/cv-project/src/constants/actionTypes.js":"24","/home/user/andronik/cv-project/cv-project/src/actions/portfolioActions.js":"25"},{"size":632,"mtime":1606915035787,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1606896876111,"results":"28","hashOfConfig":"27"},{"size":174,"mtime":1606982127887,"results":"29","hashOfConfig":"27"},{"size":1576,"mtime":1607439148720,"results":"30","hashOfConfig":"27"},{"size":8478,"mtime":1607439148720,"results":"31","hashOfConfig":"27"},{"size":468,"mtime":1607326576203,"results":"32","hashOfConfig":"27"},{"size":6819,"mtime":1607424453895,"results":"33","hashOfConfig":"27"},{"size":870,"mtime":1607439148716,"results":"34","hashOfConfig":"27"},{"size":1607,"mtime":1607439148744,"results":"35","hashOfConfig":"27"},{"size":2846,"mtime":1607439148744,"results":"36","hashOfConfig":"27"},{"size":1282,"mtime":1607067903580,"results":"37","hashOfConfig":"27"},{"size":1901,"mtime":1607089108999,"results":"38","hashOfConfig":"27"},{"size":6452,"mtime":1607417698200,"results":"39","hashOfConfig":"27"},{"size":364,"mtime":1607326559884,"results":"40","hashOfConfig":"27"},{"size":783,"mtime":1607439148740,"results":"41","hashOfConfig":"27"},{"size":17654,"mtime":1607439736794,"results":"42","hashOfConfig":"27"},{"size":6319,"mtime":1607353434916,"results":"43","hashOfConfig":"27"},{"size":4924,"mtime":1607336892945,"results":"44","hashOfConfig":"27"},{"size":9259,"mtime":1607502338076,"results":"45","hashOfConfig":"27"},{"size":235,"mtime":1607326735589,"results":"46","hashOfConfig":"27"},{"size":1625,"mtime":1607085067744,"results":"47","hashOfConfig":"27"},{"size":964,"mtime":1606984818645,"results":"48","hashOfConfig":"27"},{"size":553,"mtime":1606986682156,"results":"49","hashOfConfig":"27"},{"size":2690,"mtime":1607413209140,"results":"50","hashOfConfig":"27"},{"size":4154,"mtime":1607413407921,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"qz4mbe",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/home/user/andronik/cv-project/cv-project/src/index.js",[],["106","107"],"/home/user/andronik/cv-project/cv-project/src/reportWebVitals.js",[],"/home/user/andronik/cv-project/cv-project/src/store/configureStore.js",[],"/home/user/andronik/cv-project/cv-project/src/App.js",[],"/home/user/andronik/cv-project/cv-project/src/components/Template1.jsx",[],"/home/user/andronik/cv-project/cv-project/src/reducers/rootReducer.js",[],"/home/user/andronik/cv-project/cv-project/src/main.js",["108"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport StepConnector from \"@material-ui/core/StepConnector\";\nimport Button from \"@material-ui/core/Button\";\nimport AboutMe from \"./components/inputs/aboutMe\";\nimport AboutWorkHistory from \"./components/inputs/aboutWorkHistory\";\nimport AboutHardSkills from \"./components/inputs/aboutHardSkills\";\nimport {Redirect} from \"react-router-dom\";\nimport Portfolio from \"./components/inputs/portfolio\";\nimport PermIdentityIcon from \"@material-ui/icons/PermIdentity\";\nimport WorkIcon from \"@material-ui/icons/Work\";\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport { useSelector } from \"react-redux\";\n\n// import { useSelector } from 'react-redux';\n\nconst ColorlibConnector = withStyles({\n  alternativeLabel: {\n    top: 22,\n  },\n  active: {\n    \"& $line\": {\n      backgroundImage:\n        \"linear-gradient(to top right, rgb(23, 11, 11), rgb(40, 16, 12), rgb(58, 20, 13), rgb(75, 25, 14), rgb(93, 29, 15), rgb(110, 34, 16), rgb(110, 39, 18), rgb(111, 44, 19), rgb(111, 49, 21), rgb(111, 54, 22), rgb(112, 59, 24), rgb(112, 64, 25));\",\n    },\n  },\n  completed: {\n    \"& $line\": {\n      backgroundImage:\n        \"linear-gradient(to top right, rgb(23, 11, 11), rgb(40, 16, 12), rgb(58, 20, 13), rgb(75, 25, 14), rgb(93, 29, 15), rgb(110, 34, 16), rgb(110, 39, 18), rgb(111, 44, 19), rgb(111, 49, 21), rgb(111, 54, 22), rgb(112, 59, 24), rgb(112, 64, 25));\",\n    },\n  },\n  line: {\n    height: 3,\n    border: 0,\n    backgroundColor: \"#eaeaf0\",\n    borderRadius: 1,\n  },\n})(StepConnector);\n\nconst useColorlibStepIconStyles = makeStyles({\n  root: {\n    backgroundColor: \"white\",\n    zIndex: 1,\n    color: \"black\",\n    width: 50,\n    height: 50,\n    display: \"flex\",\n    borderRadius: \"50%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    \n  },\n  active: {\n    backgroundColor: \"#f74d33\",\n   \n    boxShadow: \"0 4px 10px 0 rgba(0,0,0,.25)\",\n  },\n  completed: {\n\n    backgroundColor: \"#f74d33\",\n  },\n});\n\nfunction ColorlibStepIcon(props) {\n  const classes = useColorlibStepIconStyles();\n  const { active, completed } = props;\n\n  const icons = {\n    1: <PermIdentityIcon />,\n    2: <WorkIcon />,\n    3: <FlashOnIcon />,\n    4: <DescriptionIcon />,\n  };\n\n  return (\n    <div\n      className={clsx(classes.root, {\n        [classes.active]: active,\n        [classes.completed]: completed,\n      })}\n    >\n      {icons[String(props.icon)]}\n    </div>\n  );\n}\n\nColorlibStepIcon.propTypes = {\n  /**\n   * Whether this step is active.\n   */\n  active: PropTypes.bool,\n  /**\n   * Mark the step as completed. Is passed to child components.\n   */\n  completed: PropTypes.bool,\n  /**\n   * The label displayed in the step icon.\n   */\n  icon: PropTypes.node,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  button: {\n    backgroundColor: \"rgb(247, 77, 51)\",\n    marginRight: theme.spacing(1),\n    \"&:hover\": {\n      backgroundColor: \"white\",\n      borderColor: \"rgb(247, 77, 51)\",\n      boxShadow: \"none\",\n    },\n  },\n\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction getSteps() {\n  return [\n    \"Personal information\",\n    \"Experience\",\n    \"Skills\",\n    \"Portfolio\",\n  ];\n}\n\nfunction getStepContent(step,open) {\n  switch (step) {\n    \n    case 0:\n      return <AboutMe />;\n    case 1:\n      return <AboutWorkHistory />;\n    case 2:\n      return <AboutHardSkills />;\n    case 3:\n      return <Portfolio />;\n\n    default:\n      return \"Unknown step\";\n  }\n}\n\nexport default function CustomizedSteppers() {\n  \n  const { templateNumber } = useSelector((state) => state.templateReducer);\n  let {firstName, secondName, careerObjective, aboutMeInfo, email, phoneNumber, } = useSelector(state => state.aboutMeReducer)\n\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n  const [cls, setCls] = useState([\"side\"]);\n  const [open, setOpen] = useState(true);\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    \n  };\n  \n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    \n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n  \n\n  useEffect(() => {\n    if (open) {\n      setCls((oldArr) => [...oldArr, \"open\"]);\n      \n    } else {\n      setCls(['side']);\n\n    }\n  }, [open]);\nconst link = `./template-${templateNumber}-1.png`\n  return (\n    \n    <div className=\"page\">\n      \n      <div  className={cls.join(\" \")}>\n      {templateNumber === ''?<h2 className=\"side-h2\">\nplease select a template</h2>:<h2 className=\"side-h2\">Selected template</h2>}\n        \n        {templateNumber === ''?null:<img className=\"side-img\" src={link} alt=\"\" />}\n        {!open?(<div onClick={() => setOpen(!open)} className=\"side-open\">\n          Open\n          </div>):(<div className='side-close' onClick={() => setOpen(!open)}>\n            Close\n            </div>)}\n        \n\n      </div>\n      <Stepper\n        className=\"t-1\"\n        alternativeLabel\n        activeStep={activeStep}\n        connector={<ColorlibConnector />}\n      >\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <Redirect to=\"/resume\" className={classes.instructions} />\n            <Button onClick={handleReset} className={classes.button}>\n              Reset\n            </Button>\n          </div>\n        ) : (\n          <div className=\"container-pdf\">\n            <div className={classes.instructions}>\n              {getStepContent(activeStep)}\n            </div>\n            <div>\n              <Button\n                variant=\"contained\"\n                disabled={activeStep === 0}\n                onClick={handleBack}\n                className={classes.button}\n              >\n                Back\n              </Button>\n              {!(firstName&&secondName&&careerObjective&&aboutMeInfo&&email)?<h2 className=\"h3-template\">\n\n              fill in the fields with *</h2>:<Button\n                variant=\"contained\"\n                onClick={handleNext}\n                className={classes.button}\n              >\n                {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\n              </Button>}\n              \n              \n            </div>\n          </div>\n        )}\n      </div>\n      \n    </div>\n  );\n}\n","/home/user/andronik/cv-project/cv-project/src/1.js",[],"/home/user/andronik/cv-project/cv-project/src/test1.js",["109"],"import React from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nexport const Tags = () => {\n  \n  const [tags, setTags] = React.useState([])\n\n  console.log(tags)\n\n    return (\n      <div style={{ width: 500 }}>\n        <Autocomplete\n          multiple\n          options={top100Films}\n          getOptionLabel={option => option.title}\n          defaultValue={[]}\n          onChange={(_, values) => setTags(values)}\n          renderInput={params => (\n            <TextField\n              {...params}\n              variant=\"standard\"\n              label=\"Multiple values\"\n              placeholder=\"Favorites\"\n              margin=\"normal\"\n              fullWidth\n            />\n          )}\n        />\n      </div>\n    );\n}\nexport default Tags;\n\n\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n];","/home/user/andronik/cv-project/cv-project/src/templatePage.jsx",[],"/home/user/andronik/cv-project/cv-project/src/reducers/aboutWorkHistoryReducer.js",[],"/home/user/andronik/cv-project/cv-project/src/reducers/aboutMeReducer.js",[],"/home/user/andronik/cv-project/cv-project/src/reducers/portfolioReducer.js",[],"/home/user/andronik/cv-project/cv-project/src/reducers/templateReducer.js",[],"/home/user/andronik/cv-project/cv-project/src/reducers/aboutHardSkillsReducer.js",[],"/home/user/andronik/cv-project/cv-project/src/components/inputs/portfolio.js",["110"],"import React from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport allPortfolioActions from '../../actions/portfolioActions';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\nconst useStyles2 = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n\n\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n}));\n\n\nconst Portfolio = () => {\n  const dispatch = useDispatch()\n\n  const { firstProject, secondProject, thirdProject, fourthProject, fifthProject, sixthProject } = useSelector(state => state.portfolioReducer)\n\n  const classes = useStyles();\n  const classes2 = useStyles2();\n\n  let firstSummaryCounter = (220 - firstProject.summary.length) + ' letters left.'\n  let firstWhatYouDoCounter = (180 - firstProject.whatYouDo.length) + ' letters left.'\n  let secondSummaryCounter = (220 - secondProject.summary.length) + ' letters left.'\n  let secondWhatYouDoCounter = (180 - secondProject.whatYouDo.length) + ' letters left.'\n  let thirdSummaryCounter = (220 - thirdProject.summary.length) + ' letters left.'\n  let thirdWhatYouDoCounter = (180 - thirdProject.whatYouDo.length) + ' letters left.'\n  let fourthSummaryCounter = (220 - fourthProject.summary.length) + ' letters left.'\n  let fourthWhatYouDoCounter = (180 - fourthProject.whatYouDo.length) + ' letters left.'\n  let fifthSummaryCounter = (220 - fifthProject.summary.length) + ' letters left.'\n  let fifthWhatYouDoCounter = (180 - fifthProject.whatYouDo.length) + ' letters left.'\n  let sixthSummaryCounter = (220 - sixthProject.summary.length) + ' letters left.'\n  let sixthWhatYouDoCounter = (180 - sixthProject.whatYouDo.length) + ' letters left.'\n\n  let showSecond = (!(firstProject.name && firstProject.link && firstProject.summary && firstProject.whatYouDo && firstProject.stack) && !(secondProject.name || secondProject.link || secondProject.summary || secondProject.whatYouDo || secondProject.stack))\n  let showThird = (!(secondProject.name && secondProject.link && secondProject.summary && secondProject.whatYouDo && secondProject.stack) && !(thirdProject.name || thirdProject.link || thirdProject.summary || thirdProject.whatYouDo || thirdProject.stack))\n  let showFourth = (!(thirdProject.name && thirdProject.link && thirdProject.summary && thirdProject.whatYouDo && thirdProject.stack) && !(fourthProject.name || fourthProject.link || fourthProject.summary || fourthProject.whatYouDo || fourthProject.stack))\n  let showFifth = (!(fourthProject.name && fourthProject.link && fourthProject.summary && fourthProject.whatYouDo && fourthProject.stack) && !(fifthProject.name || fifthProject.link || fifthProject.summary || fifthProject.whatYouDo || fifthProject.stack))\n  let showSixth = (!(fifthProject.name && fifthProject.link && fifthProject.summary && fifthProject.whatYouDo && fifthProject.stack) && !(sixthProject.name || sixthProject.link || sixthProject.summary || sixthProject.whatYouDo || sixthProject.stack))\n\n  return (\n    <div className='container'>\n      <div className={classes2.root}>\n        <h2 className='t-1'>Tell about your best projects.</h2>\n\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <div >\n              <h3>First project.</h3>\n            </div>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n              <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField value={firstProject.name} onChange={e => dispatch(allPortfolioActions.setFirstProjectName(e.target.value))} label=\"Project name\" variant=\"outlined\" />\n                <TextField value={firstProject.link} onChange={e => dispatch(allPortfolioActions.setFirstProjectLink(e.target.value))} label='Link to this project' variant='outlined' />\n                <TextField\n                  value={firstProject.summary}\n                  onChange={e => dispatch(allPortfolioActions.setFirstProjectSummary(e.target.value.length <= 220 ? e.target.value : firstProject.summary))}\n                  helperText={firstProject.summary.length > 0 ? firstSummaryCounter : ''}\n                  label='Summary'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField value={firstProject.whatYouDo}\n                  onChange={e => dispatch(allPortfolioActions.setFirstProjectWhatYouDo(e.target.value.length <= 180 ? e.target.value : firstProject.whatYouDo))}\n                  helperText={firstProject.whatYouDo.length > 0 ? firstWhatYouDoCounter : ''}\n                  label='What you did here?'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField value={firstProject.stack}\n                  onChange={e => dispatch(allPortfolioActions.setFirstProjectStack(e.target.value))}\n                  label='Stack'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n              </form>\n              <p>\n                All fields are required.</p>\n            </div>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion hidden={showSecond}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel2a-content\"\n            id=\"panel2a-header\"\n          >\n            <div className={classes2.heading} ><h3>Second project</h3></div>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n\n              <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField value={secondProject.name} onChange={e => dispatch(allPortfolioActions.setSecondProjectName(e.target.value))} label=\"Project name\" variant=\"outlined\" />\n                <TextField value={secondProject.link} onChange={e => dispatch(allPortfolioActions.setSecondProjectLink(e.target.value))} label='Link to this project' variant='outlined' />\n                <TextField\n                  value={secondProject.summary}\n                  onChange={e => dispatch(allPortfolioActions.setSecondProjectSummary(e.target.value.length <= 220 ? e.target.value : secondProject.summary))}\n                  helperText={secondProject.summary.length > 0 ? secondSummaryCounter : ''}\n                  label='Summary'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField\n                  value={secondProject.whatYouDo}\n                  onChange={e => dispatch(allPortfolioActions.setSecondProjectWhatYouDo(e.target.value.length <= 180 ? e.target.value : secondProject.whatYouDo))}\n                  helperText={secondProject.whatYouDo.length > 0 ? secondWhatYouDoCounter : ''}\n                  label='What you did here?'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField\n                  value={secondProject.stack}\n                  onChange={e => dispatch(allPortfolioActions.setSecondProjectStack(e.target.value))}\n                  label='Stack'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n              </form>\n              <p>\n                All fields are required.</p>\n            </div>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion hidden={showThird}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel2a-content\"\n            id=\"panel2a-header\"\n          >\n            <div className={classes2.heading}><h3>Third project</h3></div>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n              <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField value={thirdProject.name} onChange={e => dispatch(allPortfolioActions.setThirdProjectName(e.target.value))} label=\"Project name\" variant=\"outlined\" />\n                <TextField value={thirdProject.link} onChange={e => dispatch(allPortfolioActions.setThirdProjectLink(e.target.value))} label='Link to this project' variant='outlined' />\n                <TextField\n                  value={thirdProject.summary}\n                  onChange={e => dispatch(allPortfolioActions.setThirdProjectSummary(e.target.value.length <= 220 ? e.target.value : thirdProject.summary))}\n                  helperText={thirdProject.summary.length > 0 ? thirdSummaryCounter : ''}\n                  label='Summary'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField\n                  value={thirdProject.whatYouDo}\n                  onChange={e => dispatch(allPortfolioActions.setThirdProjectWhatYouDo(e.target.value.length <= 180 ? e.target.value : thirdProject.whatYouDo))}\n                  helperText={thirdProject.whatYouDo.length > 0 ? thirdWhatYouDoCounter : ''}\n                  label='What you did here?'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField\n                  value={thirdProject.stack}\n                  onChange={e => dispatch(allPortfolioActions.setThirdProjectStack(e.target.value))}\n                  label='Stack'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n              </form>\n              <p>\n                All fields are required.</p>\n            </div>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion hidden={showFourth}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel2a-content\"\n            id=\"panel2a-header\"\n          >\n            <div className={classes2.heading}><h3>Fourth project</h3></div>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n              <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField value={fourthProject.name} onChange={e => dispatch(allPortfolioActions.setFourthProjectName(e.target.value))} label=\"Project name\" variant=\"outlined\" />\n                <TextField value={fourthProject.link} onChange={e => dispatch(allPortfolioActions.setFourthProjectLink(e.target.value))} label='Link to this project' variant='outlined' />\n                <TextField\n                  value={fourthProject.summary}\n                  onChange={e => dispatch(allPortfolioActions.setFourthProjectSummary(e.target.value.length <= 220 ? e.target.value : fourthProject.summary))}\n\n                  helperText={fourthProject.summary.length > 0 ? fourthSummaryCounter : ''}\n                  label='Summary'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField\n                  value={fourthProject.whatYouDo}\n                  onChange={e => dispatch(allPortfolioActions.setFourthProjectWhatYouDo(e.target.value.length <= 180 ? e.target.value : fourthProject.whatYouDo))}\n                  helperText={fourthProject.whatYouDo.length > 0 ? fourthWhatYouDoCounter : ''}\n                  label='What you did here?'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField\n                  value={fourthProject.stack}\n                  onChange={e => dispatch(allPortfolioActions.setFourthProjectStack(e.target.value))}\n                  label='Stack'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n              </form>\n              <p>\n                All fields are required.</p>\n            </div>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion hidden={showFifth}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel2a-content\"\n            id=\"panel2a-header\"\n          >\n            <div className={classes2.heading}><h3>Fifth project</h3></div>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n              <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField value={fifthProject.name} onChange={e => dispatch(allPortfolioActions.setFifthProjectName(e.target.value))} label=\"Project name\" variant=\"outlined\" />\n                <TextField value={fifthProject.link} onChange={e => dispatch(allPortfolioActions.setFifthProjectLink(e.target.value))} label='Link to this project' variant='outlined' />\n                <TextField\n                  value={fifthProject.summary}\n                  onChange={e => dispatch(allPortfolioActions.setFifthProjectSummary(e.target.value.length <= 220 ? e.target.value : fifthProject.summary))}\n\n                  helperText={fifthProject.summary.length > 0 ? fifthSummaryCounter : ''}\n                  label='Summary'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField\n                  value={fifthProject.whatYouDo}\n                  onChange={e => dispatch(allPortfolioActions.setFifthProjectWhatYouDo(e.target.value.length <= 180 ? e.target.value : fifthProject.whatYouDo))}\n                  helperText={fifthProject.whatYouDo.length > 0 ? fifthWhatYouDoCounter : ''}\n                  label='What you did here?'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField\n                  value={fifthProject.stack}\n                  onChange={e => dispatch(allPortfolioActions.setFifthProjectStack(e.target.value))}\n                  label='Stack'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n              </form>\n              <p>\n                All fields are required.</p>\n            </div>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion hidden={showSixth}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel2a-content\"\n            id=\"panel2a-header\"\n          >\n            <div className={classes2.heading}><h3>Sixth project</h3></div>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n              <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField value={sixthProject.name} onChange={e => dispatch(allPortfolioActions.setSixthProjectName(e.target.value))} label=\"Project name\" variant=\"outlined\" />\n                <TextField value={sixthProject.link} onChange={e => dispatch(allPortfolioActions.setSixthProjectLink(e.target.value))} label='Link to this project' variant='outlined' />\n                <TextField\n                  value={sixthProject.summary}\n                  onChange={e => dispatch(allPortfolioActions.setSixthProjectSummary(e.target.value.length <= 220 ? e.target.value : sixthProject.summary))}\n\n                  helperText={sixthProject.summary.length > 0 ? sixthSummaryCounter : ''}\n                  label='Summary'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField\n                  value={sixthProject.whatYouDo}\n                  onChange={e => dispatch(allPortfolioActions.setSixthProjectWhatYouDo(e.target.value.length <= 180 ? e.target.value : sixthProject.whatYouDo))}\n                  helperText={sixthProject.whatYouDo.length > 0 ? sixthWhatYouDoCounter : ''}\n                  label='What you did here?'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n                <TextField\n                  value={sixthProject.stack}\n                  onChange={e => dispatch(allPortfolioActions.setSixthProjectStack(e.target.value))}\n                  label='Stack'\n                  variant='outlined'\n                  multiline\n                  rowsMax={10}\n                  id=\"outlined-multiline-flexible\" />\n              </form>\n              <p>\n                All fields are required.</p>\n            </div>\n          </AccordionDetails>\n        </Accordion>\n      </div>\n\n\n\n\n    </div>\n  )\n}\n\nexport default Portfolio\n\n\n","/home/user/andronik/cv-project/cv-project/src/components/inputs/aboutMe.js",[],"/home/user/andronik/cv-project/cv-project/src/components/inputs/aboutWorkHistory.js",[],"/home/user/andronik/cv-project/cv-project/src/components/inputs/aboutHardSkills.js",["111"],"/home/user/andronik/cv-project/cv-project/src/actions/templateActions.js",[],"/home/user/andronik/cv-project/cv-project/src/actions/aboutMeActions.js",[],"/home/user/andronik/cv-project/cv-project/src/actions/aboutWorkActions.js",[],"/home/user/andronik/cv-project/cv-project/src/actions/aboutHardSkillsActions.js",[],"/home/user/andronik/cv-project/cv-project/src/constants/actionTypes.js",[],"/home/user/andronik/cv-project/cv-project/src/actions/portfolioActions.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":158,"column":68,"nodeType":"118","messageId":"119","endLine":158,"endColumn":79},{"ruleId":"116","severity":1,"message":"120","line":2,"column":8,"nodeType":"118","messageId":"119","endLine":2,"endColumn":12},{"ruleId":"116","severity":1,"message":"121","line":10,"column":8,"nodeType":"118","messageId":"119","endLine":10,"endColumn":14},{"ruleId":"116","severity":1,"message":"122","line":9,"column":8,"nodeType":"118","messageId":"119","endLine":9,"endColumn":13},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'phoneNumber' is assigned a value but never used.","Identifier","unusedVar","'Chip' is defined but never used.","'Button' is defined but never used.","'NoSsr' is defined but never used.","no-global-assign","no-unsafe-negation"]